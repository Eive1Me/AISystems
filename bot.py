from time import sleep
from dotenv import load_dotenv
import telebot
import os
from deeppavlov import build_model, configs
from deeppavlov.core.common.file import read_json
from bs4 import BeautifulSoup
from urllib.request import Request, urlopen

load_dotenv()

token = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(token)

class Context:
    def __init__(self, c):
        self.c = c

    def set_context(self, arg):
        self.c = arg

    def get_context(self):
        return self.c

model_config = read_json('squad_ru_bert_infer.json')
model = build_model(model_config, download=True)
mess_context = Context('')
html_context = Context('')
with open('text.txt', 'r') as file:
    data = file.read().replace('\n', ' ')
file_context = Context(data)


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (/c <context> -- –≤–µ—Ä–Ω—ë—Ç context)
def extract_arg(arg):
    if len(arg.split()) > 1:
        return arg[arg.index(' '):]
    else:
        raise Exception


#–°—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
@bot.message_handler(commands=['reload_file'])
def reload_file(message):
    with open('data.txt', 'r') as file:
        data = file.read().replace('\n', ' ')
    file_context.set_context(data)
    bot.reply_to(message, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/start' –∏ '/help'
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, "üå∏ –ü—Ä–∏–≤–µ—Ç! üå∏\n\nüß∑ –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ —Ñ–∞–π–ª–∞.\n" + 
    "üß∑ –£—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ /c [—Ç–µ–∫—Å—Ç] –∏ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ /q [–≤–æ–ø—Ä–æ—Å], —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.\n" + 
    "üß∑ –ò—Å–ø–æ–ª—å–∑—É–π /parse [—Å—Å—ã–ª–∫–∞] –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Å–∞–π—Ç–∞ –∏ /ask [–≤–æ–ø—Ä–æ—Å], —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ –Ω–µ–º—É –æ—Ç–≤–µ—Ç—ã.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/parse'
@bot.message_handler(commands=['parse'])
def parse_html(message):
    req = Request(extract_arg(message.text))
    html_page = urlopen(req)
    soup = BeautifulSoup(html_page, "html.parser")
    html_text = soup.get_text()
    html_context.set_context(html_text)
    bot.reply_to(message, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@bot.message_handler(commands=['ask'])
def ask_html(message):
    bot.reply_to(message, '–û—Ç–≤–µ—Ç: \n' + model([f'{html_context.get_context()}'], [f'{extract_arg(message.text)}'])[0][0])


#–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@bot.message_handler(commands=['c'])
def set_main_context(message):
    mess_context.set_context(extract_arg(message.text))
    bot.reply_to(message, '–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
@bot.message_handler(commands=['q'])
def ask_question(message):
    bot.reply_to(message, '–û—Ç–≤–µ—Ç: \n' + model([f'{mess_context.get_context()}'], [f'{extract_arg(message.text)}'])[0][0])


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ —Ñ–∞–π–ª–∞
@bot.message_handler(content_types=['text'])
def ask_question(message):
    bot.reply_to(message, '–û—Ç–≤–µ—Ç: \n' + model([f'{file_context.get_context()}'], [f'{message.text}'])[0][0])


print("I\'m listening!")
while True:
    try:
        bot.infinity_polling()
    except Exception as error:
        print(error)
        sleep(15)
