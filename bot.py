from time import sleep
from dotenv import load_dotenv
import telebot
import os
import requests
from deeppavlov import build_model, train_model
from deeppavlov.core.common.file import read_json
from multiprocessing import Process, Queue

load_dotenv()
token = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(token)


#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π
intent_catcher_model_config = read_json('intent_catcher.json')


#–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def get_text_message(message):
    queue.put(message.text)
    intent_result = queue.get()
    print("–°–æ–æ–±—â–µ–Ω–∏–µ:", message.text)
    print("–ò–Ω—Ç–µ–Ω—Ç:", intent_result[0])

    if intent_result[0] == 'cqa':
        bot.reply_to(message, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–Ω–∞—Ç—å?")
        bot.register_next_step_handler(message,launch_cqa)
        print("1")
    elif intent_result[0] == 'start':
        send_welcome(message)
        print("2")
    elif intent_result[0] == 'cat':
        url = get_url()
        bot.send_photo(message.chat.id, url)
        print("3")
    else:
        bot.reply_to(message, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –í—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ:(")


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ cqa
def launch_cqa(message):
    messageText = message.text
    os.system("python cqa.py \"" + str(message.chat.id) + "\" " + "\"" + messageText + "\"")


#–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
def work_with_intent_catcher_model(q):
    intent_catcher_model = build_model(intent_catcher_model_config)

    q.put(1)
    while True:
        q.put(intent_catcher_model([q.get()]))


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (/c <context> -- –≤–µ—Ä–Ω—ë—Ç context)
def extract_arg(arg):
    if len(arg.split()) > 1:
        return arg[arg.index(' '):]
    else:
        raise Exception


# –û–±—Ä–∞–±–æ—Ç–∫–∞ '/start' –∏ '/help'
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, "üå∏ –ü—Ä–∏–≤–µ—Ç! üå∏\n\nüß∑ –ì–æ–≤–æ—Ä–∏, —á–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è, —è —Å–æ –≤—Å–µ–º –ø–æ–º–æ–≥—É.\n" + 
    "üß∑ –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Ç–æ, —á—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ñ–∞–π–ª–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å (—Å–µ–π—á–∞—Å —Ç–∞–º –ø—Ä–æ –∫—Ñ—É). üëâüëà \n" + 
    "üß∑ –ù—É, –∞ –µ—Å–ª–∏ —Ç–µ–±–µ —Å–æ–≤—Å–µ–º —Å–∫—É—á–Ω–æ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ—á–∫–∏ –∫–æ—Ç–∏–∫–æ–≤!")


def get_url():
    contents = requests.get('https://aws.random.cat/meow').json()
    image_url = contents['file']
    return image_url


queue = Queue()
child_process = Process(target=work_with_intent_catcher_model, args=(queue,))
child_process.start()
queue.get()
print("I\'m listening!")
while True:
    try:
        bot.infinity_polling()
    except Exception as error:
        print(error)
        sleep(15)
